/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2012
//
// Copyright in this software belongs to University of Southampton
// IT Innovation Centre of Gamma House, Enterprise Road, 
// Chilworth Science Park, Southampton, SO16 7NS, UK.
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//      Created By :            Simon Crowle
//      Created Date :          11-Oct-2012
//      Created for Project :   EXPERIMEDIA
//
/////////////////////////////////////////////////////////////////////////

package uk.ac.soton.itinnovation.experimedia.arch.ecc.samples.shared;

import uk.ac.soton.itinnovation.experimedia.arch.ecc.common.dataModel.metrics.Report;

import java.util.Date;



/**
 * Use this interface to represent a type that will generate a metric value on demand
 * from the MeasurementScheduler. Note that this interface should provide some basic
 * statistics about the measurements it has taken in the past.
 * 
 * @author Simon Crowle
 */
public interface ITakeMeasurement
{
    /**
     * This method should be used to write the latest metric data encapsulated in a report
     * (this will be generated by the MeasurementScheduler).
     * 
     * @param reportOUT - OUT parameter into which the latest metric data should be written.
     */
    void takeMeasure( Report reportOUT );
    
    /**
     * This method should return the number of measurements made by this ITakeMeasurement instance.
     * 
     * @return - Positive integer value representing the nunber of measurements.
     */
    int getMeasurementCount();
    
    /**
     * This method should return the time-stamp of the first measurement made by this ITakeMeasurement instance.
     * 
     * @return - Date of the first measurement taken.
     */
    Date getFirstMeasurementDate();
    
    /**
     * This method should return the time-stamp of the last measurement made by this ITakeMeasurement instance.
     * 
     * @return - Date of the last measurement taken.
     */
    Date getLastMeasurementDate();
}
