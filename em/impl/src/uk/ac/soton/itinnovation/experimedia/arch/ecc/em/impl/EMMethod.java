/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2012
//
// Copyright in this software belongs to University of Southampton
// IT Innovation Centre of Gamma House, Enterprise Road, 
// Chilworth Science Park, Southampton, SO16 7NS, UK.
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//      Created By :            sgc
//      Created Date :          29-Jul-2012
//      Created for Project :   EXPERIMEDIA
//
/////////////////////////////////////////////////////////////////////////

package uk.ac.soton.itinnovation.experimedia.arch.ecc.em.impl;

import uk.ac.soton.itinnovation.experimedia.arch.ecc.em.spec.*;
import uk.ac.soton.itinnovation.experimedia.arch.ecc.amqpAPI.impl.eccInterface.AbstractECCInterface;

import org.yaml.snakeyaml.Yaml;
import java.util.*;



/**
 * EMMethod encapsulates a method call from the monitoring client.
 * 
 * methodName - name of the method call. May NOT contain '<' or '>'
 * eventname  - name of the event generated by the method. May NOT contain '<' or '>'
 * index      - unique index of the method for the interface
 * 
 * @author sgc
 */
public class EMMethod implements IEMMethod
{  
  private String  methodName;
  private String  eventName;
  private Integer methodIndex;
  private Yaml    yamlUtil;
  
  private AbstractECCInterface amqpInterface;
  
  
  public EMMethod( String mName,
                   String eName, 
                   int ind,
                   Yaml yaml )
  {
    methodName  = mName;
    eventName   = eName;
    methodIndex = ind;
    yamlUtil    = yaml;
    
    // Only initialise AMQP interface using copy constructor
  }
  
  public EMMethod( EMMethod method, AbstractECCInterface amqpIFace )
  {
    methodName  = method.methodName;
    eventName   = method.eventName;
    methodIndex = method.methodIndex;
    yamlUtil    = method.yamlUtil;
    
    amqpInterface = amqpIFace;
  }
  
  public String getMethodName()
  { return methodName; }
  
  public String getEventName()
  { return eventName; }
    
  public Integer getIndex()
  { return methodIndex.intValue(); /* Return copy only! */ }

  // IEMMethod -----------------------------------------------------------------
  @Override
  public void execute( List<Object> parameters ) throws Exception
  {
    if ( amqpInterface == null ) throw new Exception( "No AMQP connection available" );
  
    EMMethodPayload empl = new EMMethodPayload( methodIndex, parameters );
    amqpInterface.sendBasicMessage( yamlUtil.dump(empl) );
  }
}
