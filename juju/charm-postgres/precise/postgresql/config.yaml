options:
  dumpfile_location:
    default: "None"
    type: string
    description: |
        Path to a dumpfile to load into DB when service is initiated.
  config_change_command:
    default: "reload"
    type: string
    description: |
        The command to run whenever config has changed. Accepted values are
        "reload" or "restart" - any other value will mean neither is executed
        after a config change (which may be desired, if you're running a
        production server and would rather handle these out of band). Note that
        postgresql will still need to be reloaded whenever authentication and
        access details are updated, so disabling either doesn't mean PostgreSQL
        will never be reloaded.
  version:
    default: "9.1"
    type: string
    description: Version of PostgreSQL that we want to install
  cluster_name:
    default: "main"
    type: string
    description: Name of the cluster we want to install the DBs into
  listen_ip:
    default: "*"
    type: string
    description: IP to listen on
  listen_port:
    default: 5432
    type: int
    description: Port to listen on
  max_connections:
    default: 100
    type: int
    description: Maximum number of connections to allow to the PG database
  ssl:
    default: "True"
    type: string
    description: Whether PostgreSQL should talk SSL
  log_min_duration_statement:
    default: -1
    type: int
    description: |
        -1 is disabled, 0 logs all statements
        and their durations, > 0 logs only
        statements running at least this number
        of milliseconds
  log_checkpoints:
    default: "off"
    type: string
    description: Log checkpoints
  log_connections:
    default: "off"
    type: string
    description: Log connections
  log_disconnections:
    default: "off"
    type: string
    description: Log disconnections
  log_line_prefix:
    default: "%t "
    type: string
    description: |
        special values:
          %a = application name
          %u = user name
          %d = database name
          %r = remote host and port
          %h = remote host
          %p = process ID
          %t = timestamp without milliseconds
          %m = timestamp with milliseconds
          %i = command tag
          %e = SQL state
          %c = session ID
          %l = session line number
          %s = session start timestamp
          %v = virtual transaction ID
          %x = transaction ID (0 if none)
          %q = stop here in non-session processes
          %% = '%'
        e.g. '<%u%%%d> '
  log_lock_waits:
    default: "off"
    type: string
    description: log lock waits >= deadlock_timeout
  log_timezone:
    default: "UTC"
    type: string
    description: Log timezone
  autovacuum:
    default: "on"
    type: string
    description: Autovacuum
  log_autovacuum_min_duration:
    default: -1
    type: int
    description: |
        -1 disables, 0 logs all actions and their durations, > 0 logs only
        actions running at least this number of milliseconds.
  autovacuum_analyze_threshold:
    default: 50
    type: int
    description: min number of row updates before analyze
  autovacuum_vacuum_scale_factor:
    default: 0.2
    type: float
    description: Fraction of table size before vacuum
  autovacuum_analyze_scale_factor:
    default: 0.1  
    type: float
    description: Fraction of table size before analyze
  autovacuum_vacuum_cost_delay:
    default: "20ms"
    type: string
    description: |
        Default vacuum cost delay for autovacuum, in milliseconds;
        -1 means use vacuum_cost_delay
  search_path:
    default: "\"$user\",public"
    type: string
    descripton: Schema names
  standard_conforming_strings:
    default: "on"
    type: string
    description: Standard conforming strings
  hot_standby:
    default: ""
    type: string
    description: Hot standby
  hot_standby_feedback:
    default: ""
    type: string
    description: Hot standby feedback
  wal_level:
    default: ""
    type: string
    description: WAL level
  max_wal_senders:
    default: ""
    type: string
    description: WAL level senders
  wal_keep_segments:
    default: ""
    type: string
    description: WAL keep segments
  work_mem:
    default: "1MB"
    type: string
    description: Working Memory
  maintenance_work_mem:
    default: "1MB"
    type: string
    description: Maintenance working memory
  performance_tuning:
    default: "auto"
    type: string
    description: |
        Possible values here are "auto" or "manual". If we set "auto" then the
        charm will attempt to automatically tune all the performance paramaters
        as below. If manual, then it will use the defaults below unless
        overridden. "auto" gathers information about the node you're deployed
        on and tries to make intelligent guesses about what tuning parameters
        to set based on available RAM and CPU under the assumption that it's
        the only significant service running on this node.
  kernel_shmall:
    default: 0
    type: int
    description: Kernel/shmall
  kernel_shmmax:
    default: 0
    type: int
    description: Kernel/shmmax
  shared_buffers:
    default: "8MB"
    type: string
    description: Shared buffers
  temp_buffers:
    default: "1MB"
    type: string
    description: Temp buffers
  wal_buffers:
    default: "-1"
    type: string
    description: |
        min 32kB, -1 sets based on shared_buffers (change requires restart)
  checkpoint_segments:
    default: 3
    type: int
    description: in logfile segments, min 1, 16MB each
  random_page_cost:
    default: 4.0
    type: float
    description: Random page cost
  effective_cache_size:
    default: "128MB"
    type: string
    description: Effective cache size
  #------------------------------------------------------------------------
  # Volume management
  #   volume-map, volume-dev_regexp are only used 
  #   if volume-ephemeral-storage == False
  #------------------------------------------------------------------------
  volume-ephemeral-storage:
    type: boolean
    default: true
    description: >
      If false, a configure-error state will be raised if
         volume-map[$JUJU_UNIT_NAME] is not set (see "volume-map"
         below) - see "volume-map" below.
      If true, service units won't try to use "volume-map" (and
         related variables) to mount and use external (EBS) volumes,
         thus storage lifetime will equal VM, thus ephemeral.
         YOU'VE BEEN WARNED.
  volume-map:
    type: string
    default: ""
    description: >
      YAML map as e.g. "{ postgres/0: vol-0000010, postgres/1: vol-0000016 }".
      Service units will raise a "configure-error" condition if no volume-map
      value is set for it - it's expected a human to set it properly to resolve it.
  volume-dev-regexp:
    type: string
    default: "/dev/vd[b-z]"
    description: >
      Block device for attached volumes as seen by the VM, will be "scanned"
      for an unused device when "volume-map" is valid for the unit.
  backup_schedule:
    default: "13 4 * * *"
    type: string
    description: Cron-formatted schedule for database backups.
  backup_retension_count:
    default: 7
    type: int
    description: Number of recent backups to retain.
  nagios_context:
    default: "juju"
    type: string
    description: |
        Used by the nrpe-external-master subordinate charm.
        A string that will be prepended to instance name to set the host name
        in nagios. So for instance the hostname would be something like:
            juju-postgresql-0
        If you're running multiple environments with the same services in them
        this allows you to differentiate between them.
  nagios_service_type:
     default: "generic"
     type: string
     description: |
        What service this component forms part of e.g. productsearch, uccs etc. Used
        by nrpe
