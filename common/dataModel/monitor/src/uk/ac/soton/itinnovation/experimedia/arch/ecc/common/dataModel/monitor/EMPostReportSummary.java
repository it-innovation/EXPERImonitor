/////////////////////////////////////////////////////////////////////////
//
// Â© University of Southampton IT Innovation Centre, 2012
//
// Copyright in this software belongs to University of Southampton
// IT Innovation Centre of Gamma House, Enterprise Road, 
// Chilworth Science Park, Southampton, SO16 7NS, UK.
//
// This software may not be used, sold, licensed, transferred, copied
// or reproduced in whole or in part in any manner or form or in or
// on any media by any person other than in accordance with the terms
// of the Licence Agreement supplied with the software, or otherwise
// without the prior written consent of the copyright owners.
//
// This software is distributed WITHOUT ANY WARRANTY, without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
// PURPOSE, except where stated in the Licence Agreement supplied with
// the software.
//
//      Created By :            Simon Crowle
//      Created Date :          22-Aug-2012
//      Created for Project :   EXPERIMEDIA
//
/////////////////////////////////////////////////////////////////////////

package uk.ac.soton.itinnovation.experimedia.arch.ecc.common.dataModel.monitor;

import uk.ac.soton.itinnovation.experimedia.arch.ecc.common.dataModel.metrics.*;

import java.util.*;




/**
 * EMPostReportSummary encapsulates Reports of MeasurementSets describing the
 * range of the data generated by the user client during the course of the experiment.
 * 
 * @author sgc
 */
public class EMPostReportSummary
{
  private HashMap<UUID, Report> reportsByMeasurementSetID;
  
  
  public EMPostReportSummary()
  {
    reportsByMeasurementSetID = new HashMap<UUID, Report>();
  }
  
  /**
   * Returns a set of all the MeasurementSet IDs referred to by this summary report.
   * 
   * @return - Set of IDs for the MeasurementSets in this summary
   */
  public Set<UUID> getReportedMeasurementSetIDs()
  { return reportsByMeasurementSetID.keySet(); }
  
  /**
   * Adds a report to this summary. The report instance should contain correct
   * references to the MeasurementSet IDs.
   * 
   * @param report - Report instance (fields must not be null)
   */
  public void addReport( Report report )
  {
    if ( report != null )
    {
      MeasurementSet ms = report.getMeasurementSet();
      
      if ( ms != null )
        reportsByMeasurementSetID.put( ms.getID(), report );
    }
  }
  
  /**
   * Removes the Report associated with the MeasurementSet ID
   * 
   * @param measurementSetID - ID of the MeasurementSet
   */
  public void removeReport( UUID measurementSetID )
  {
    if ( measurementSetID != null )
      reportsByMeasurementSetID.remove( measurementSetID );
  }
  
  /**
   * Gets the report associated with the MeasurementSet ID
   * 
   * @param measurementID - MeasurementSet ID
   * @return              - Report instance detailing the metric data for the MeasurementSet ID
   */
  public Report getReport( UUID measurementID )
  {
    Report report = null;
    
    if ( measurementID != null )
      report = reportsByMeasurementSetID.get( measurementID );
    
    return report;
  }
}
