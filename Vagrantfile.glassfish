# -*- mode: ruby -*-
# vi: set ft=ruby :

# To use, install vagrant and VirtualBox and type "vagrant up"

# The following environment variables can be used to control the behaviour:
# ECC_IP: the IP address for the ECC VM to use (default 10.0.0.10)
# ECC_UUID: the UUID for the dashboard to use (default 00000000-0000-0000-0000-000000000000)
# ECC_PORT: the port to map the ECC to on the host machine (default 8090)
# RABBIT_IP: the IP address to use for RabbitMQ (default 10.0.0.10)
# RABBIT_PORT: the port to map RabbitMQ to on the host machine (default 5682)
# RABBIT_MGT_PORT: the port to map RabbitMQ management interface to on the host machine (default 55682)
# ECC_GIT: if defined then ECC source is checked out from git and this branch used, otherwise uses source from host machine
# DEBUGGER_PORT: the port to map Java debugger to on the host machine (default 8000)

## Configuration for this script (this part is Ruby) ##

hostname = "ECC-22-glassfish"
ram = "1536"

ecc_ip = (ENV['ECC_IP'] ? ENV['ECC_IP'] : '10.0.0.10')
ecc_uuid = (ENV['ECC_UUID'] ? ENV['ECC_UUID'] : '00000000-0000-0000-0000-000000000000')
ecc_port = (ENV['ECC_PORT'] ? ENV['ECC_PORT'] : '8090')
rabbit_ip = (ENV['RABBIT_IP'] ? ENV['RABBIT_IP'] : '10.0.0.10')
#rabbit_ip = "rabbitmq.experimedia.eu"
rabbit_port = (ENV['RABBIT_PORT'] ? ENV['RABBIT_PORT'] : '5682')
rabbit_mgt_port = (ENV['RABBIT_MGT_PORT'] ? ENV['RABBIT_MGT_PORT'] : '55682')
ecc_git = (ENV['ECC_GIT'] ? ENV['ECC_GIT'] : '')
debugger_port = (ENV['DEBUGGER_PORT'] ? ENV['DEBUGGER_PORT'] : '8000')
glassfish_port = (ENV['GLASSFISH_PORT'] ? ENV['GLASSFISH_PORT'] : '4848')

info = "
ECC service is deployed on VM with IP #{ecc_ip}
ECC service is mapped to http://localhost:#{ecc_port}/ECC/ on host machine.
Glassfish front page is mapped to http://localhost:#{ecc_port}
OpenRDF workbench is mapped to http://localhost:#{ecc_port}/openrdf-workbench on host machine
Using RabbitMQ deployed on #{rabbit_ip}
RabbitMQ AMQP bus mapped to http://localhost:#{rabbit_port} on host machine.
RabbitMQ management interface is mapped to http://localhost:#{rabbit_mgt_port} on host machine (username: guest / password: guest).
Java debugger is mapped to port #{debugger_port} on host machine.

Tail the log file with: vagrant ssh -c 'tail -f /opt/glassfish3/glassfish/domains/domain1/logs/server.log'"

## The following shell script is run once the VM is built (this part is bash) ##

$script = <<SCRIPT

## Check for existence of required third party files ##

if [ ! -e /vagrant/thirdPartyLibs/owlim-lite-5.4.jar ] || [ ! -e /vagrant/thirdPartyLibs/openrdf-sesame.war ] || [ ! -e /vagrant/thirdPartyLibs/openrdf-workbench.war ]
then
	echo "Could not find all the required files in the thirdPartyLibs directory: aborting!"
	echo "VM may be up but not provisioned."
	exit 0
fi

## Install dependencies ##

echo "Updating package index..."
apt-get -qq update
#apt-get upgrade -y  # could upgrade base OS packages if you want

echo "Installing dependencies..."
# Switch to Java 7 before installing Glassfish
apt-get install -y openjdk-7-jdk
update-alternatives --set java /usr/lib/jvm/java-7-openjdk-i386/jre/bin/java
rm /usr/lib/jvm/default-java
ln -s /usr/lib/jvm/java-1.7.0-openjdk-i386 /usr/lib/jvm/default-java

apt-get install -y git
apt-get install -y maven
apt-get install -y postgresql-9.1
apt-get install -y rabbitmq-server

## Get the ECC code ##

# remove old code to get a clean(ish) build in case we are re-provisioning
rm -rf experimedia-ecc

# get ECC code (need to do this before PostgreSQL config)
if [ '#{ecc_git}' != "" ]; then
	# set up deploy key to enable access to gitlab
	cp -a /vagrant/thirdPartyConfig/gitLab/.ssh ~
	# get the latest ECC code from Git
	git clone git@glab-i1.it-innovation.soton.ac.uk:experimedia/ecc.git experimedia-ecc
	cd experimedia-ecc
	# need -f to force it, otherwise it prints a warning and nothing happens
	git checkout -f #{ecc_git}
	# copy thirdPartyLibs from host machine
	cp /vagrant/thirdPartyLibs/* thirdPartyLibs
	cd ..
else
	# or copy ECC code from guest machine to host machine
	mkdir experimedia-ecc
	rsync -a /vagrant/ experimedia-ecc --exclude '.git' --exclude 'target'
fi

## Build ##
echo "**** Building ECC"

cd experimedia-ecc
cd thirdPartyLibs && /bin/sh ./installLibraries.sh && cd ..
mvn install |& tee /tmp/build.log

## Set up PostgreSQL ##

# drop then create the database
sudo -u postgres dropdb edm-metrics
sudo -u postgres createdb -T template0 edm-metrics --encoding=UTF8 --locale=en_US.utf8
sudo -u postgres psql -d edm-metrics -f edm/resources/edm-metrics-postgres.sql

# set postgres user's password to "password"
sudo -u postgres psql --command="ALTER USER postgres WITH PASSWORD 'password';"

# set connection made by postgres user from command line to not need password
# set postgres user to need password for connections made via socket from localhost
# reload postgresql
echo "local all postgres trust" > /tmp/pg_hba.conf
echo "host all postgres 127.0.0.1/0 password" >> /tmp/pg_hba.conf
sudo -u postgres cp /tmp/pg_hba.conf /etc/postgresql/9.1/main
service postgresql reload

## Set up RabbitMQ ##

# enable rabbitmq management plugin so we can see what's happening
/usr/lib/rabbitmq/lib/rabbitmq_server-2.7.1/sbin/rabbitmq-plugins enable rabbitmq_management
service rabbitmq-server restart

## Set up Glassfish ##

# Install and start service
wget http://download.java.net/glassfish/3.1.2.2/release/glassfish-3.1.2.2.zip
unzip glassfish-3.1.2.2.zip
rm glassfish-3.1.2.2.zip
mv glassfish3 /opt/glassfish3
cp /vagrant/thirdPartyConfig/glassfish/glassfish /etc/init.d/glassfish
chmod +x /etc/init.d/glassfish
update-rc.d glassfish defaults

# Grant Java permission on socket
cp /vagrant/thirdPartyConfig/glassfish/java.policy /usr/lib/jvm/java-7-openjdk-i386/jre/lib/security/java.policy

# Add glassfish support for Logback
# OpenSesame
wget http://repo1.maven.org/maven2/ch/qos/logback/logback-core/0.9.28/logback-core-0.9.28.jar
cp ./logback-core-0.9.28.jar /opt/glassfish3/glassfish/lib/endorsed/logback-core-0.9.28.jar
rm logback-core-0.9.28.jar

wget http://repo1.maven.org/maven2/ch/qos/logback/logback-classic/0.9.28/logback-classic-0.9.28.jar
cp ./logback-classic-0.9.28.jar /opt/glassfish3/glassfish/lib/endorsed/logback-classic-0.9.28.jar
rm logback-classic-0.9.28.jar

wget http://central.maven.org/maven2/org/slf4j/slf4j-api/1.7.6/slf4j-api-1.7.6.jar
cp ./slf4j-api-1.7.6.jar /opt/glassfish3/glassfish/lib/endorsed/slf4j-api-1.7.6.jar
rm slf4j-api-1.7.6.jar


# ECC Service
cp ./eccService/target/EccService-2.1/WEB-INF/lib/jul-to-slf4j-1.7.6.jar /opt/glassfish3/glassfish/lib/endorsed/jul-to-slf4j-1.7.6.jar

cp ./eccService/target/EccService-2.1/WEB-INF/lib/slf4j-api-1.7.7.jar /opt/glassfish3/glassfish/lib/endorsed/slf4j-api-1.7.7.jar

cp ./eccService/target/EccService-2.1/WEB-INF/lib/logback-core-1.1.2.jar /opt/glassfish3/glassfish/lib/endorsed/logback-core-1.1.2.jar

cp ./eccService/target/EccService-2.1/WEB-INF/lib/logback-classic-1.1.2.jar /opt/glassfish3/glassfish/lib/endorsed/logback-classic-1.1.2.jar

cp ./thirdPartyConfig/glassfish/logback.xml /opt/glassfish3/glassfish/domains/domain1/config/logback.xml

cp ./thirdPartyConfig/glassfish/logging.properties /opt/glassfish3/glassfish/domains/domain1/config/logging.properties

cp ./thirdPartyConfig/glassfish/domain.xml /opt/glassfish3/glassfish/domains/domain1/config/domain.xml

# Start the Glassfish service
/opt/glassfish3/bin/asadmin start-domain

# Start Glassfish database
/opt/glassfish3/bin/asadmin start-database --dbhome opt/glassfish3/javadb

## Configure ECC Service ##

# configure location of Rabbit
# configure uuid
# can't do this at the moment, it is got from config.experimedia.eu or falls back on hard-coded values
# can alter it by hand in the GUI at start-up

## Deploy ##

# Deploy OpenRDF services into Glassfish
echo "**** Deploying OpenRDF sesame & workbench into Glassfish"
/opt/glassfish3/bin/asadmin deploy --force ./thirdPartyLibs/openrdf-sesame.war
/opt/glassfish3/bin/asadmin deploy --force ./thirdPartyLibs/openrdf-workbench.war

# deploy the ECC into Glassfish
#echo "**** Deploying ECC into Glassfish"
/opt/glassfish3/bin/asadmin deploy --force --contextroot ECC ./eccService/target/EccService-2.1.war

if [ '#{ecc_git}' != "" ]; then
	echo 'ECC built from git branch #{ecc_git}'
else
	echo 'ECC code copied from host machine'
fi

echo "Maven build log is in /tmp/build.log on guest machine"
echo "Vagrant shell script completed."
echo "#{info}"

SCRIPT

## Back to Ruby again ##

Vagrant.configure("2") do |config|

    # build off ubuntu 12.04 LTS (32 bit)
	config.vm.box = "precise32"
    config.vm.box_url = "http://files.vagrantup.com/precise32.box"
    config.vm.hostname = hostname

	# Forward host port to guest port 8080 for Glassfish
	config.vm.network :forwarded_port, host: Integer(ecc_port), guest: 8080
	# Forward host port to guest port 5672 for RabbitMQ messages
	config.vm.network :forwarded_port, host: Integer(rabbit_port), guest: 5672
	# Forward host port to guest port 55672 for RabbitMQ management page
	config.vm.network :forwarded_port, host: Integer(rabbit_mgt_port), guest: 55672
	# Forward host port to guest port 8000 for Java debugger
	config.vm.network :forwarded_port, host: Integer(debugger_port), guest: 8000
  # Forward host port to guest port 4848 for Glassfish management
	config.vm.network :forwarded_port, host: Integer(glassfish_port), guest: 4848

	# Set static private network address.
	# Deploying with a static IP like this means that VirtualBox will set up a virtual network
	# card that listens on e.g. 10.0.0.0/48
	# If you have other machines on that subnet then change the IP or you will have to delete
	# the virtual card from the VirtualBox GUI afterwards.  The purpose of using a static IP
	# is so that other services deployed in the same way can communicate.
	config.vm.network "private_network", ip: ecc_ip

    # configure virtualbox
    config.vm.provider :virtualbox do |vb|
        vb.customize [
            'modifyvm', :id,
            '--name', hostname,
            '--memory', ram
        ]
	end

	# Provision using shell script embedded above
	config.vm.provision :shell, :inline => $script

end